#include "..\Common.h"
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <chrono>

char* SERVERIP = (char*)"127.0.0.1";
#define SERVERPORT 9000

bool SendFixedVariable(SOCKET& sock, USHORT pushSize, const char* src, char* buf);
void ClearLine();

int main(int argc, char* argv[]) {
	int retval;

	// 명령행 인수가 있으면 IP 주소로 사용
	if (argc > 1) SERVERIP = argv[1];

	// 윈속 초기화
	WSADATA wsa;
	if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)
		return 1;

	// 소켓 생성
	SOCKET sock = socket(AF_INET, SOCK_STREAM, 0);
	if (sock == INVALID_SOCKET) err_quit("socket()");

	// connect()
	struct sockaddr_in serveraddr;
	memset(&serveraddr, 0, sizeof(serveraddr));
	serveraddr.sin_family = AF_INET;
	inet_pton(AF_INET, SERVERIP, &serveraddr.sin_addr);
	serveraddr.sin_port = htons(SERVERPORT);
	retval = connect(sock, (struct sockaddr*)&serveraddr, sizeof(serveraddr));
	if (retval == SOCKET_ERROR) err_quit("connect()");

	// 전송할 파일의 이름을 입력받아 읽어온다.
	string fileName;
	cout << "전송할 파일 이름을 입력하시오 : ";
	cin >> fileName;

	// 파일 데이터와 파일의 크기를 읽어(c++17)온다.
	ifstream file{ fileName, ios::binary };
	vector<char> data(istreambuf_iterator<char>{file}, {});
	cout << "파일의 크기 : " << data.size() << "\n";

	// 데이터 통신에 사용할 버퍼 생성
	USHORT bufSize;
	cout << "전송시 사용할 버퍼의 사이즈를 입력하시오(65,535 이하) : ";
	cin >> bufSize;
	char* buf = new char[bufSize];

	// 서버와 데이터 통신
	auto startTime = std::chrono::system_clock::now();

	// 1. 파일 이름 보내기
	SendFixedVariable(sock, fileName.length(), fileName.c_str(), buf);
	cout << "0% 전송완료\n";

	// 2. 파일 데이터 보내기
	cout.precision(1);
	int cnt = 0;
	UINT i = 0;
	UINT printPoint = 0;
	while (i < data.size()) {
		// 데이터의 길이 알기
		USHORT pushSize;
		if (i + bufSize < data.size()) {	// 버퍼에 꽈채워서 넣으면 된다.
			pushSize = bufSize;
		}
		else {
			pushSize = data.size() - i;
		}

		if (!SendFixedVariable(sock, pushSize, &data[i], buf))
			break;

		if (printPoint + data.size() / 100 <= i) {
			++cnt;
			printPoint = i;
			ClearLine();
			system("cls");
			cout << fixed << double(i) / data.size() * 100.0 << "% 전송완료\n";
		}

		i += pushSize;
	}

	ClearLine();
	cout << "100.0% 전송완료\n";

	cout << bufSize << "크기의 버퍼 사이즈를 사용결과\n";
	auto endTime = std::chrono::system_clock::now();
	auto sec = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime);
	cout << sec << " 의 시간이 걸렸습니다.(주의 - 약100번의 cout, cls 시간이 포함되었다.)\n";

	delete[] buf;

	// 소켓 닫기
	closesocket(sock);

	// 윈속 종료
	WSACleanup();
	return 0;
}

bool SendFixedVariable(SOCKET& sock, USHORT pushSize, const char* src, char* buf) {
	int retval;

	// 데이터 보내기(고정 길이)
	retval = send(sock, (char*)&pushSize, sizeof(USHORT), 0);
	if (retval == SOCKET_ERROR) {
		err_display("send()");
		return false;
	}

	// 데이터 보내기
	copy_n(src, pushSize, buf);
	retval = send(sock, buf, pushSize, 0);
	if (retval == SOCKET_ERROR) {
		err_display("send()");
		return false;
	}
}

// 비주얼 스튜디오로 실행할때 사용하면 깔끔합니다.
void ClearLine() {
	cout << "\33[2K"; //line clear
	cout << "\x1b[A"; //up line (ESC [ A) must be support VT100 escape seq
}